//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    odata_$metadata(): Promise<OData_IEdmModel> {
        let url_ = this.baseUrl + "/odata/$metadata";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json;odata.metadata=minimal;odata.streaming=true"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOdata_$metadata(_response);
        });
    }

    protected processOdata_$metadata(response: Response): Promise<OData_IEdmModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OData_IEdmModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OData_IEdmModel>(null as any);
    }

    /**
     * @return Success
     */
    odata_(): Promise<OData_ODataServiceDocument> {
        let url_ = this.baseUrl + "/odata";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json;odata.metadata=minimal;odata.streaming=true"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOdata_(_response);
        });
    }

    protected processOdata_(response: Response): Promise<OData_ODataServiceDocument> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OData_ODataServiceDocument.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OData_ODataServiceDocument>(null as any);
    }

    /**
     * @return Success
     */
    navbarActions(): Promise<INavbarAction[]> {
        let url_ = this.baseUrl + "/api/NavbarActions";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json;odata.metadata=minimal;odata.streaming=true"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processNavbarActions(_response);
        });
    }

    protected processNavbarActions(response: Response): Promise<INavbarAction[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(INavbarAction.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<INavbarAction[]>(null as any);
    }

    /**
     * @return Success
     */
    postingGET(id: number): Promise<PostingGetGeneral> {
        let url_ = this.baseUrl + "/api/Posting/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json;odata.metadata=minimal;odata.streaming=true"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostingGET(_response);
        });
    }

    protected processPostingGET(response: Response): Promise<PostingGetGeneral> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PostingGetGeneral.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PostingGetGeneral>(null as any);
    }

    /**
     * @return Success
     */
    getDetailed(id: number): Promise<PostingGetDetailed> {
        let url_ = this.baseUrl + "/api/Posting/detailed/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json;odata.metadata=minimal;odata.streaming=true"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDetailed(_response);
        });
    }

    protected processGetDetailed(response: Response): Promise<PostingGetDetailed> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PostingGetDetailed.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PostingGetDetailed>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    postingPOST(body: PostingCreate | undefined): Promise<PostingGetDetailed> {
        let url_ = this.baseUrl + "/api/Posting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json;odata.metadata=minimal;odata.streaming=true",
                "Accept": "application/json;odata.metadata=minimal;odata.streaming=true"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostingPOST(_response);
        });
    }

    protected processPostingPOST(response: Response): Promise<PostingGetDetailed> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = PostingGetDetailed.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PostingGetDetailed>(null as any);
    }

    /**
     * @param scheme (optional) 
     * @return Success
     */
    refreshValidity(scheme: string | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/User/email/refresh-validity?";
        if (scheme === null)
            throw new Error("The parameter 'scheme' cannot be null.");
        else if (scheme !== undefined)
            url_ += "scheme=" + encodeURIComponent("" + scheme) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PATCH",
            headers: {
                "Accept": "application/json;odata.metadata=minimal;odata.streaming=true"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshValidity(_response);
        });
    }

    protected processRefreshValidity(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return Success
     */
    sendValidation(): Promise<void> {
        let url_ = this.baseUrl + "/api/User/email/send-validation";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSendValidation(_response);
        });
    }

    protected processSendValidation(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

/** 1 = Offer 2 = Request 4 = Permanent 5 = Sell 6 = Buy 8 = Temporary 9 = Rent 10 = Lease 13 = SaleOrRent 14 = BuyOrLease 15 = All */
export enum BargainKinds {
    Offer = 1,
    Request = 2,
    Permanent = 4,
    Sell = 5,
    Buy = 6,
    Temporary = 8,
    Rent = 9,
    Lease = 10,
    SaleOrRent = 13,
    BuyOrLease = 14,
    All = 15,
}

export class INavbarAction implements IINavbarAction {
    readonly DisplayName?: string | undefined;
    readonly Path?: string | undefined;

    constructor(data?: IINavbarAction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).DisplayName = _data["DisplayName"];
            (<any>this).Path = _data["Path"];
        }
    }

    static fromJS(data: any): INavbarAction {
        data = typeof data === 'object' ? data : {};
        let result = new INavbarAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DisplayName"] = this.DisplayName;
        data["Path"] = this.Path;
        return data;
    }
}

export interface IINavbarAction {
    DisplayName?: string | undefined;
    Path?: string | undefined;
}

export class LocationPostingDetails implements ILocationPostingDetails {
    Country!: string;
    City?: string | undefined;
    Address?: string | undefined;
    Latitude?: number | undefined;
    Longitude?: number | undefined;

    constructor(data?: ILocationPostingDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.Country = _data["Country"];
            this.City = _data["City"];
            this.Address = _data["Address"];
            this.Latitude = _data["Latitude"];
            this.Longitude = _data["Longitude"];
        }
    }

    static fromJS(data: any): LocationPostingDetails {
        data = typeof data === 'object' ? data : {};
        let result = new LocationPostingDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Country"] = this.Country;
        data["City"] = this.City;
        data["Address"] = this.Address;
        data["Latitude"] = this.Latitude;
        data["Longitude"] = this.Longitude;
        return data;
    }
}

export interface ILocationPostingDetails {
    Country: string;
    City?: string | undefined;
    Address?: string | undefined;
    Latitude?: number | undefined;
    Longitude?: number | undefined;
}

/** 0 = None 1 = EntitySet 2 = ActionImport 3 = FunctionImport 4 = Singleton */
export enum OData_EdmContainerElementKind {
    None = 0,
    EntitySet = 1,
    ActionImport = 2,
    FunctionImport = 3,
    Singleton = 4,
}

/** 0 = None 1 = BinaryConstant 2 = BooleanConstant 3 = DateTimeOffsetConstant 4 = DecimalConstant 5 = FloatingConstant 6 = GuidConstant 7 = IntegerConstant 8 = StringConstant 9 = DurationConstant 10 = Null 11 = Record 12 = Collection 13 = Path 14 = If 15 = Cast 16 = IsType 17 = FunctionApplication 18 = LabeledExpressionReference 19 = Labeled 20 = PropertyPath 21 = NavigationPropertyPath 22 = DateConstant 23 = TimeOfDayConstant 24 = EnumMember 25 = AnnotationPath */
export enum OData_EdmExpressionKind {
    None = 0,
    BinaryConstant = 1,
    BooleanConstant = 2,
    DateTimeOffsetConstant = 3,
    DecimalConstant = 4,
    FloatingConstant = 5,
    GuidConstant = 6,
    IntegerConstant = 7,
    StringConstant = 8,
    DurationConstant = 9,
    Null = 10,
    Record = 11,
    Collection = 12,
    Path = 13,
    If = 14,
    Cast = 15,
    IsType = 16,
    FunctionApplication = 17,
    LabeledExpressionReference = 18,
    Labeled = 19,
    PropertyPath = 20,
    NavigationPropertyPath = 21,
    DateConstant = 22,
    TimeOfDayConstant = 23,
    EnumMember = 24,
    AnnotationPath = 25,
}

/** 0 = None 1 = TypeDefinition 2 = Term 3 = Action 4 = EntityContainer 5 = Function */
export enum OData_EdmSchemaElementKind {
    None = 0,
    TypeDefinition = 1,
    Term = 2,
    Action = 3,
    EntityContainer = 4,
    Function = 5,
}

/** 0 = None 1 = Primitive 2 = Entity 3 = Complex 4 = Collection 5 = EntityReference 6 = Enum 7 = TypeDefinition 8 = Untyped 9 = Path */
export enum OData_EdmTypeKind {
    None = 0,
    Primitive = 1,
    Entity = 2,
    Complex = 3,
    Collection = 4,
    EntityReference = 5,
    Enum = 6,
    TypeDefinition = 7,
    Untyped = 8,
    Path = 9,
}

export class OData_IEdmDirectValueAnnotationsManager implements IOData_IEdmDirectValueAnnotationsManager {

    constructor(data?: IOData_IEdmDirectValueAnnotationsManager) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): OData_IEdmDirectValueAnnotationsManager {
        data = typeof data === 'object' ? data : {};
        let result = new OData_IEdmDirectValueAnnotationsManager();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IOData_IEdmDirectValueAnnotationsManager {
}

export class OData_IEdmEntityContainer implements IOData_IEdmEntityContainer {
    readonly Elements?: OData_IEdmEntityContainerElement[] | undefined;
    SchemaElementKind?: OData_EdmSchemaElementKind;
    readonly Namespace?: string | undefined;
    readonly Name?: string | undefined;

    constructor(data?: IOData_IEdmEntityContainer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["Elements"])) {
                (<any>this).Elements = [] as any;
                for (let item of _data["Elements"])
                    (<any>this).Elements!.push(OData_IEdmEntityContainerElement.fromJS(item));
            }
            this.SchemaElementKind = _data["SchemaElementKind"];
            (<any>this).Namespace = _data["Namespace"];
            (<any>this).Name = _data["Name"];
        }
    }

    static fromJS(data: any): OData_IEdmEntityContainer {
        data = typeof data === 'object' ? data : {};
        let result = new OData_IEdmEntityContainer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.Elements)) {
            data["Elements"] = [];
            for (let item of this.Elements)
                data["Elements"].push(item.toJSON());
        }
        data["SchemaElementKind"] = this.SchemaElementKind;
        data["Namespace"] = this.Namespace;
        data["Name"] = this.Name;
        return data;
    }
}

export interface IOData_IEdmEntityContainer {
    Elements?: OData_IEdmEntityContainerElement[] | undefined;
    SchemaElementKind?: OData_EdmSchemaElementKind;
    Namespace?: string | undefined;
    Name?: string | undefined;
}

export class OData_IEdmEntityContainerElement implements IOData_IEdmEntityContainerElement {
    ContainerElementKind?: OData_EdmContainerElementKind;
    Container?: OData_IEdmEntityContainer;
    readonly Name?: string | undefined;

    constructor(data?: IOData_IEdmEntityContainerElement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ContainerElementKind = _data["ContainerElementKind"];
            this.Container = _data["Container"] ? OData_IEdmEntityContainer.fromJS(_data["Container"]) : <any>undefined;
            (<any>this).Name = _data["Name"];
        }
    }

    static fromJS(data: any): OData_IEdmEntityContainerElement {
        data = typeof data === 'object' ? data : {};
        let result = new OData_IEdmEntityContainerElement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContainerElementKind"] = this.ContainerElementKind;
        data["Container"] = this.Container ? this.Container.toJSON() : <any>undefined;
        data["Name"] = this.Name;
        return data;
    }
}

export interface IOData_IEdmEntityContainerElement {
    ContainerElementKind?: OData_EdmContainerElementKind;
    Container?: OData_IEdmEntityContainer;
    Name?: string | undefined;
}

export class OData_IEdmExpression implements IOData_IEdmExpression {
    ExpressionKind?: OData_EdmExpressionKind;

    constructor(data?: IOData_IEdmExpression) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ExpressionKind = _data["ExpressionKind"];
        }
    }

    static fromJS(data: any): OData_IEdmExpression {
        data = typeof data === 'object' ? data : {};
        let result = new OData_IEdmExpression();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ExpressionKind"] = this.ExpressionKind;
        return data;
    }
}

export interface IOData_IEdmExpression {
    ExpressionKind?: OData_EdmExpressionKind;
}

export class OData_IEdmModel implements IOData_IEdmModel {
    readonly SchemaElements?: OData_IEdmSchemaElement[] | undefined;
    readonly VocabularyAnnotations?: OData_IEdmVocabularyAnnotation[] | undefined;
    readonly ReferencedModels?: OData_IEdmModel[] | undefined;
    readonly DeclaredNamespaces?: string[] | undefined;
    DirectValueAnnotationsManager?: OData_IEdmDirectValueAnnotationsManager;
    EntityContainer?: OData_IEdmEntityContainer;

    constructor(data?: IOData_IEdmModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["SchemaElements"])) {
                (<any>this).SchemaElements = [] as any;
                for (let item of _data["SchemaElements"])
                    (<any>this).SchemaElements!.push(OData_IEdmSchemaElement.fromJS(item));
            }
            if (Array.isArray(_data["VocabularyAnnotations"])) {
                (<any>this).VocabularyAnnotations = [] as any;
                for (let item of _data["VocabularyAnnotations"])
                    (<any>this).VocabularyAnnotations!.push(OData_IEdmVocabularyAnnotation.fromJS(item));
            }
            if (Array.isArray(_data["ReferencedModels"])) {
                (<any>this).ReferencedModels = [] as any;
                for (let item of _data["ReferencedModels"])
                    (<any>this).ReferencedModels!.push(OData_IEdmModel.fromJS(item));
            }
            if (Array.isArray(_data["DeclaredNamespaces"])) {
                (<any>this).DeclaredNamespaces = [] as any;
                for (let item of _data["DeclaredNamespaces"])
                    (<any>this).DeclaredNamespaces!.push(item);
            }
            this.DirectValueAnnotationsManager = _data["DirectValueAnnotationsManager"] ? OData_IEdmDirectValueAnnotationsManager.fromJS(_data["DirectValueAnnotationsManager"]) : <any>undefined;
            this.EntityContainer = _data["EntityContainer"] ? OData_IEdmEntityContainer.fromJS(_data["EntityContainer"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OData_IEdmModel {
        data = typeof data === 'object' ? data : {};
        let result = new OData_IEdmModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.SchemaElements)) {
            data["SchemaElements"] = [];
            for (let item of this.SchemaElements)
                data["SchemaElements"].push(item.toJSON());
        }
        if (Array.isArray(this.VocabularyAnnotations)) {
            data["VocabularyAnnotations"] = [];
            for (let item of this.VocabularyAnnotations)
                data["VocabularyAnnotations"].push(item.toJSON());
        }
        if (Array.isArray(this.ReferencedModels)) {
            data["ReferencedModels"] = [];
            for (let item of this.ReferencedModels)
                data["ReferencedModels"].push(item.toJSON());
        }
        if (Array.isArray(this.DeclaredNamespaces)) {
            data["DeclaredNamespaces"] = [];
            for (let item of this.DeclaredNamespaces)
                data["DeclaredNamespaces"].push(item);
        }
        data["DirectValueAnnotationsManager"] = this.DirectValueAnnotationsManager ? this.DirectValueAnnotationsManager.toJSON() : <any>undefined;
        data["EntityContainer"] = this.EntityContainer ? this.EntityContainer.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOData_IEdmModel {
    SchemaElements?: OData_IEdmSchemaElement[] | undefined;
    VocabularyAnnotations?: OData_IEdmVocabularyAnnotation[] | undefined;
    ReferencedModels?: OData_IEdmModel[] | undefined;
    DeclaredNamespaces?: string[] | undefined;
    DirectValueAnnotationsManager?: OData_IEdmDirectValueAnnotationsManager;
    EntityContainer?: OData_IEdmEntityContainer;
}

export class OData_IEdmSchemaElement implements IOData_IEdmSchemaElement {
    SchemaElementKind?: OData_EdmSchemaElementKind;
    readonly Namespace?: string | undefined;
    readonly Name?: string | undefined;

    constructor(data?: IOData_IEdmSchemaElement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.SchemaElementKind = _data["SchemaElementKind"];
            (<any>this).Namespace = _data["Namespace"];
            (<any>this).Name = _data["Name"];
        }
    }

    static fromJS(data: any): OData_IEdmSchemaElement {
        data = typeof data === 'object' ? data : {};
        let result = new OData_IEdmSchemaElement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SchemaElementKind"] = this.SchemaElementKind;
        data["Namespace"] = this.Namespace;
        data["Name"] = this.Name;
        return data;
    }
}

export interface IOData_IEdmSchemaElement {
    SchemaElementKind?: OData_EdmSchemaElementKind;
    Namespace?: string | undefined;
    Name?: string | undefined;
}

export class OData_IEdmTerm implements IOData_IEdmTerm {
    Type?: OData_IEdmTypeReference;
    readonly AppliesTo?: string | undefined;
    readonly DefaultValue?: string | undefined;
    SchemaElementKind?: OData_EdmSchemaElementKind;
    readonly Namespace?: string | undefined;
    readonly Name?: string | undefined;

    constructor(data?: IOData_IEdmTerm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.Type = _data["Type"] ? OData_IEdmTypeReference.fromJS(_data["Type"]) : <any>undefined;
            (<any>this).AppliesTo = _data["AppliesTo"];
            (<any>this).DefaultValue = _data["DefaultValue"];
            this.SchemaElementKind = _data["SchemaElementKind"];
            (<any>this).Namespace = _data["Namespace"];
            (<any>this).Name = _data["Name"];
        }
    }

    static fromJS(data: any): OData_IEdmTerm {
        data = typeof data === 'object' ? data : {};
        let result = new OData_IEdmTerm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Type"] = this.Type ? this.Type.toJSON() : <any>undefined;
        data["AppliesTo"] = this.AppliesTo;
        data["DefaultValue"] = this.DefaultValue;
        data["SchemaElementKind"] = this.SchemaElementKind;
        data["Namespace"] = this.Namespace;
        data["Name"] = this.Name;
        return data;
    }
}

export interface IOData_IEdmTerm {
    Type?: OData_IEdmTypeReference;
    AppliesTo?: string | undefined;
    DefaultValue?: string | undefined;
    SchemaElementKind?: OData_EdmSchemaElementKind;
    Namespace?: string | undefined;
    Name?: string | undefined;
}

export class OData_IEdmType implements IOData_IEdmType {
    TypeKind?: OData_EdmTypeKind;

    constructor(data?: IOData_IEdmType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.TypeKind = _data["TypeKind"];
        }
    }

    static fromJS(data: any): OData_IEdmType {
        data = typeof data === 'object' ? data : {};
        let result = new OData_IEdmType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TypeKind"] = this.TypeKind;
        return data;
    }
}

export interface IOData_IEdmType {
    TypeKind?: OData_EdmTypeKind;
}

export class OData_IEdmTypeReference implements IOData_IEdmTypeReference {
    readonly IsNullable?: boolean;
    Definition?: OData_IEdmType;

    constructor(data?: IOData_IEdmTypeReference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).IsNullable = _data["IsNullable"];
            this.Definition = _data["Definition"] ? OData_IEdmType.fromJS(_data["Definition"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OData_IEdmTypeReference {
        data = typeof data === 'object' ? data : {};
        let result = new OData_IEdmTypeReference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsNullable"] = this.IsNullable;
        data["Definition"] = this.Definition ? this.Definition.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOData_IEdmTypeReference {
    IsNullable?: boolean;
    Definition?: OData_IEdmType;
}

export class OData_IEdmVocabularyAnnotatable implements IOData_IEdmVocabularyAnnotatable {

    constructor(data?: IOData_IEdmVocabularyAnnotatable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): OData_IEdmVocabularyAnnotatable {
        data = typeof data === 'object' ? data : {};
        let result = new OData_IEdmVocabularyAnnotatable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IOData_IEdmVocabularyAnnotatable {
}

export class OData_IEdmVocabularyAnnotation implements IOData_IEdmVocabularyAnnotation {
    readonly Qualifier?: string | undefined;
    Term?: OData_IEdmTerm;
    Target?: OData_IEdmVocabularyAnnotatable;
    Value?: OData_IEdmExpression;

    constructor(data?: IOData_IEdmVocabularyAnnotation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).Qualifier = _data["Qualifier"];
            this.Term = _data["Term"] ? OData_IEdmTerm.fromJS(_data["Term"]) : <any>undefined;
            this.Target = _data["Target"] ? OData_IEdmVocabularyAnnotatable.fromJS(_data["Target"]) : <any>undefined;
            this.Value = _data["Value"] ? OData_IEdmExpression.fromJS(_data["Value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OData_IEdmVocabularyAnnotation {
        data = typeof data === 'object' ? data : {};
        let result = new OData_IEdmVocabularyAnnotation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Qualifier"] = this.Qualifier;
        data["Term"] = this.Term ? this.Term.toJSON() : <any>undefined;
        data["Target"] = this.Target ? this.Target.toJSON() : <any>undefined;
        data["Value"] = this.Value ? this.Value.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOData_IEdmVocabularyAnnotation {
    Qualifier?: string | undefined;
    Term?: OData_IEdmTerm;
    Target?: OData_IEdmVocabularyAnnotatable;
    Value?: OData_IEdmExpression;
}

export class OData_ODataEntitySetInfo implements IOData_ODataEntitySetInfo {
    TypeAnnotation?: OData_ODataTypeAnnotation;
    Url?: string | undefined;
    Name?: string | undefined;
    Title?: string | undefined;

    constructor(data?: IOData_ODataEntitySetInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.TypeAnnotation = _data["TypeAnnotation"] ? OData_ODataTypeAnnotation.fromJS(_data["TypeAnnotation"]) : <any>undefined;
            this.Url = _data["Url"];
            this.Name = _data["Name"];
            this.Title = _data["Title"];
        }
    }

    static fromJS(data: any): OData_ODataEntitySetInfo {
        data = typeof data === 'object' ? data : {};
        let result = new OData_ODataEntitySetInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TypeAnnotation"] = this.TypeAnnotation ? this.TypeAnnotation.toJSON() : <any>undefined;
        data["Url"] = this.Url;
        data["Name"] = this.Name;
        data["Title"] = this.Title;
        return data;
    }
}

export interface IOData_ODataEntitySetInfo {
    TypeAnnotation?: OData_ODataTypeAnnotation;
    Url?: string | undefined;
    Name?: string | undefined;
    Title?: string | undefined;
}

export class OData_ODataFunctionImportInfo implements IOData_ODataFunctionImportInfo {
    TypeAnnotation?: OData_ODataTypeAnnotation;
    Url?: string | undefined;
    Name?: string | undefined;
    Title?: string | undefined;

    constructor(data?: IOData_ODataFunctionImportInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.TypeAnnotation = _data["TypeAnnotation"] ? OData_ODataTypeAnnotation.fromJS(_data["TypeAnnotation"]) : <any>undefined;
            this.Url = _data["Url"];
            this.Name = _data["Name"];
            this.Title = _data["Title"];
        }
    }

    static fromJS(data: any): OData_ODataFunctionImportInfo {
        data = typeof data === 'object' ? data : {};
        let result = new OData_ODataFunctionImportInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TypeAnnotation"] = this.TypeAnnotation ? this.TypeAnnotation.toJSON() : <any>undefined;
        data["Url"] = this.Url;
        data["Name"] = this.Name;
        data["Title"] = this.Title;
        return data;
    }
}

export interface IOData_ODataFunctionImportInfo {
    TypeAnnotation?: OData_ODataTypeAnnotation;
    Url?: string | undefined;
    Name?: string | undefined;
    Title?: string | undefined;
}

export class OData_ODataServiceDocument implements IOData_ODataServiceDocument {
    TypeAnnotation?: OData_ODataTypeAnnotation;
    EntitySets?: OData_ODataEntitySetInfo[] | undefined;
    Singletons?: OData_ODataSingletonInfo[] | undefined;
    FunctionImports?: OData_ODataFunctionImportInfo[] | undefined;

    constructor(data?: IOData_ODataServiceDocument) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.TypeAnnotation = _data["TypeAnnotation"] ? OData_ODataTypeAnnotation.fromJS(_data["TypeAnnotation"]) : <any>undefined;
            if (Array.isArray(_data["EntitySets"])) {
                this.EntitySets = [] as any;
                for (let item of _data["EntitySets"])
                    this.EntitySets!.push(OData_ODataEntitySetInfo.fromJS(item));
            }
            if (Array.isArray(_data["Singletons"])) {
                this.Singletons = [] as any;
                for (let item of _data["Singletons"])
                    this.Singletons!.push(OData_ODataSingletonInfo.fromJS(item));
            }
            if (Array.isArray(_data["FunctionImports"])) {
                this.FunctionImports = [] as any;
                for (let item of _data["FunctionImports"])
                    this.FunctionImports!.push(OData_ODataFunctionImportInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OData_ODataServiceDocument {
        data = typeof data === 'object' ? data : {};
        let result = new OData_ODataServiceDocument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TypeAnnotation"] = this.TypeAnnotation ? this.TypeAnnotation.toJSON() : <any>undefined;
        if (Array.isArray(this.EntitySets)) {
            data["EntitySets"] = [];
            for (let item of this.EntitySets)
                data["EntitySets"].push(item.toJSON());
        }
        if (Array.isArray(this.Singletons)) {
            data["Singletons"] = [];
            for (let item of this.Singletons)
                data["Singletons"].push(item.toJSON());
        }
        if (Array.isArray(this.FunctionImports)) {
            data["FunctionImports"] = [];
            for (let item of this.FunctionImports)
                data["FunctionImports"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOData_ODataServiceDocument {
    TypeAnnotation?: OData_ODataTypeAnnotation;
    EntitySets?: OData_ODataEntitySetInfo[] | undefined;
    Singletons?: OData_ODataSingletonInfo[] | undefined;
    FunctionImports?: OData_ODataFunctionImportInfo[] | undefined;
}

export class OData_ODataSingletonInfo implements IOData_ODataSingletonInfo {
    TypeAnnotation?: OData_ODataTypeAnnotation;
    Url?: string | undefined;
    Name?: string | undefined;
    Title?: string | undefined;

    constructor(data?: IOData_ODataSingletonInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.TypeAnnotation = _data["TypeAnnotation"] ? OData_ODataTypeAnnotation.fromJS(_data["TypeAnnotation"]) : <any>undefined;
            this.Url = _data["Url"];
            this.Name = _data["Name"];
            this.Title = _data["Title"];
        }
    }

    static fromJS(data: any): OData_ODataSingletonInfo {
        data = typeof data === 'object' ? data : {};
        let result = new OData_ODataSingletonInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TypeAnnotation"] = this.TypeAnnotation ? this.TypeAnnotation.toJSON() : <any>undefined;
        data["Url"] = this.Url;
        data["Name"] = this.Name;
        data["Title"] = this.Title;
        return data;
    }
}

export interface IOData_ODataSingletonInfo {
    TypeAnnotation?: OData_ODataTypeAnnotation;
    Url?: string | undefined;
    Name?: string | undefined;
    Title?: string | undefined;
}

export class OData_ODataTypeAnnotation implements IOData_ODataTypeAnnotation {
    readonly TypeName?: string | undefined;

    constructor(data?: IOData_ODataTypeAnnotation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).TypeName = _data["TypeName"];
        }
    }

    static fromJS(data: any): OData_ODataTypeAnnotation {
        data = typeof data === 'object' ? data : {};
        let result = new OData_ODataTypeAnnotation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TypeName"] = this.TypeName;
        return data;
    }
}

export interface IOData_ODataTypeAnnotation {
    TypeName?: string | undefined;
}

export class PostingAuthorGet implements IPostingAuthorGet {
    Id!: string;
    Name!: string;
    Email!: string;

    constructor(data?: IPostingAuthorGet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.Id = _data["Id"];
            this.Name = _data["Name"];
            this.Email = _data["Email"];
        }
    }

    static fromJS(data: any): PostingAuthorGet {
        data = typeof data === 'object' ? data : {};
        let result = new PostingAuthorGet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.Id;
        data["Name"] = this.Name;
        data["Email"] = this.Email;
        return data;
    }
}

export interface IPostingAuthorGet {
    Id: string;
    Name: string;
    Email: string;
}

export class PostingCreate implements IPostingCreate {
    Title!: string;
    Description!: string;
    ThumbnailUrl!: string;
    Details!: PostingDetails;

    constructor(data?: IPostingCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.Details = new PostingDetails();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.Title = _data["Title"];
            this.Description = _data["Description"];
            this.ThumbnailUrl = _data["ThumbnailUrl"];
            this.Details = _data["Details"] ? PostingDetails.fromJS(_data["Details"]) : new PostingDetails();
        }
    }

    static fromJS(data: any): PostingCreate {
        data = typeof data === 'object' ? data : {};
        let result = new PostingCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.Title;
        data["Description"] = this.Description;
        data["ThumbnailUrl"] = this.ThumbnailUrl;
        data["Details"] = this.Details ? this.Details.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPostingCreate {
    Title: string;
    Description: string;
    ThumbnailUrl: string;
    Details: PostingDetails;
}

export class PostingDetails implements IPostingDetails {
    Pricing?: PricingPostingDetails;
    Location?: LocationPostingDetails;
    Kind!: PostingKind;
    RealEstate?: RealEstatePostingDetails;
    Vehicle?: VehiclePostingDetails;

    constructor(data?: IPostingDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.Pricing = _data["Pricing"] ? PricingPostingDetails.fromJS(_data["Pricing"]) : <any>undefined;
            this.Location = _data["Location"] ? LocationPostingDetails.fromJS(_data["Location"]) : <any>undefined;
            this.Kind = _data["Kind"];
            this.RealEstate = _data["RealEstate"] ? RealEstatePostingDetails.fromJS(_data["RealEstate"]) : <any>undefined;
            this.Vehicle = _data["Vehicle"] ? VehiclePostingDetails.fromJS(_data["Vehicle"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PostingDetails {
        data = typeof data === 'object' ? data : {};
        let result = new PostingDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Pricing"] = this.Pricing ? this.Pricing.toJSON() : <any>undefined;
        data["Location"] = this.Location ? this.Location.toJSON() : <any>undefined;
        data["Kind"] = this.Kind;
        data["RealEstate"] = this.RealEstate ? this.RealEstate.toJSON() : <any>undefined;
        data["Vehicle"] = this.Vehicle ? this.Vehicle.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPostingDetails {
    Pricing?: PricingPostingDetails;
    Location?: LocationPostingDetails;
    Kind: PostingKind;
    RealEstate?: RealEstatePostingDetails;
    Vehicle?: VehiclePostingDetails;
}

export class PostingGetDetailed implements IPostingGetDetailed {
    General!: PostingGetGeneral;
    PictureUrls!: string[];
    Author!: PostingAuthorGet;
    Details!: PostingDetails;
    Id?: number;

    constructor(data?: IPostingGetDetailed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.General = new PostingGetGeneral();
            this.PictureUrls = [];
            this.Author = new PostingAuthorGet();
            this.Details = new PostingDetails();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.General = _data["General"] ? PostingGetGeneral.fromJS(_data["General"]) : new PostingGetGeneral();
            if (Array.isArray(_data["PictureUrls"])) {
                this.PictureUrls = [] as any;
                for (let item of _data["PictureUrls"])
                    this.PictureUrls!.push(item);
            }
            this.Author = _data["Author"] ? PostingAuthorGet.fromJS(_data["Author"]) : new PostingAuthorGet();
            this.Details = _data["Details"] ? PostingDetails.fromJS(_data["Details"]) : new PostingDetails();
            this.Id = _data["Id"];
        }
    }

    static fromJS(data: any): PostingGetDetailed {
        data = typeof data === 'object' ? data : {};
        let result = new PostingGetDetailed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["General"] = this.General ? this.General.toJSON() : <any>undefined;
        if (Array.isArray(this.PictureUrls)) {
            data["PictureUrls"] = [];
            for (let item of this.PictureUrls)
                data["PictureUrls"].push(item);
        }
        data["Author"] = this.Author ? this.Author.toJSON() : <any>undefined;
        data["Details"] = this.Details ? this.Details.toJSON() : <any>undefined;
        data["Id"] = this.Id;
        return data;
    }
}

export interface IPostingGetDetailed {
    General: PostingGetGeneral;
    PictureUrls: string[];
    Author: PostingAuthorGet;
    Details: PostingDetails;
    Id?: number;
}

export class PostingGetGeneral implements IPostingGetGeneral {
    Id!: number;
    Title!: string;
    Description!: string;
    ThumbnailUrl!: string;
    DatePosted!: Date;
    Slug!: string;

    constructor(data?: IPostingGetGeneral) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.Id = _data["Id"];
            this.Title = _data["Title"];
            this.Description = _data["Description"];
            this.ThumbnailUrl = _data["ThumbnailUrl"];
            this.DatePosted = _data["DatePosted"] ? new Date(_data["DatePosted"].toString()) : <any>undefined;
            this.Slug = _data["Slug"];
        }
    }

    static fromJS(data: any): PostingGetGeneral {
        data = typeof data === 'object' ? data : {};
        let result = new PostingGetGeneral();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.Id;
        data["Title"] = this.Title;
        data["Description"] = this.Description;
        data["ThumbnailUrl"] = this.ThumbnailUrl;
        data["DatePosted"] = this.DatePosted ? this.DatePosted.toISOString() : <any>undefined;
        data["Slug"] = this.Slug;
        return data;
    }
}

export interface IPostingGetGeneral {
    Id: number;
    Title: string;
    Description: string;
    ThumbnailUrl: string;
    DatePosted: Date;
    Slug: string;
}

/** 0 = RealEstate 1 = Vehicle */
export enum PostingKind {
    RealEstate = 0,
    Vehicle = 1,
}

export class PricingPostingDetails implements IPricingPostingDetails {
    BargainKinds!: BargainKinds;
    Price?: number | undefined;
    PriceMax?: number | undefined;

    constructor(data?: IPricingPostingDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.BargainKinds = _data["BargainKinds"];
            this.Price = _data["Price"];
            this.PriceMax = _data["PriceMax"];
        }
    }

    static fromJS(data: any): PricingPostingDetails {
        data = typeof data === 'object' ? data : {};
        let result = new PricingPostingDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["BargainKinds"] = this.BargainKinds;
        data["Price"] = this.Price;
        data["PriceMax"] = this.PriceMax;
        return data;
    }
}

export interface IPricingPostingDetails {
    BargainKinds: BargainKinds;
    Price?: number | undefined;
    PriceMax?: number | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

/** 0 = House 1 = Apartment 2 = Condo 3 = Townhouse 4 = Land 5 = Other */
export enum RealEstateKind {
    House = 0,
    Apartment = 1,
    Condo = 2,
    Townhouse = 3,
    Land = 4,
    Other = 5,
}

export class RealEstatePostingDetails implements IRealEstatePostingDetails {
    Kind!: RealEstateKind;
    SpacePurpose!: RealEstateSpacePurpose;
    Area!: number;
    Rooms!: number;

    constructor(data?: IRealEstatePostingDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.Kind = _data["Kind"];
            this.SpacePurpose = _data["SpacePurpose"];
            this.Area = _data["Area"];
            this.Rooms = _data["Rooms"];
        }
    }

    static fromJS(data: any): RealEstatePostingDetails {
        data = typeof data === 'object' ? data : {};
        let result = new RealEstatePostingDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Kind"] = this.Kind;
        data["SpacePurpose"] = this.SpacePurpose;
        data["Area"] = this.Area;
        data["Rooms"] = this.Rooms;
        return data;
    }
}

export interface IRealEstatePostingDetails {
    Kind: RealEstateKind;
    SpacePurpose: RealEstateSpacePurpose;
    Area: number;
    Rooms: number;
}

/** 0 = Residential 1 = Commercial 2 = Industrial 3 = Any 4 = Other */
export enum RealEstateSpacePurpose {
    Residential = 0,
    Commercial = 1,
    Industrial = 2,
    Any = 3,
    Other = 4,
}

export class VehiclePostingDetails implements IVehiclePostingDetails {
    Year!: number;
    Manufacturer!: string;
    Model!: string;

    constructor(data?: IVehiclePostingDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.Year = _data["Year"];
            this.Manufacturer = _data["Manufacturer"];
            this.Model = _data["Model"];
        }
    }

    static fromJS(data: any): VehiclePostingDetails {
        data = typeof data === 'object' ? data : {};
        let result = new VehiclePostingDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Year"] = this.Year;
        data["Manufacturer"] = this.Manufacturer;
        data["Model"] = this.Model;
        return data;
    }
}

export interface IVehiclePostingDetails {
    Year: number;
    Manufacturer: string;
    Model: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
export const ApiPropertyTable = {
    BargainKinds: [
    ],
    INavbarAction: [
        { name: "DisplayName", schemaTypeName: null },
        { name: "Path", schemaTypeName: null },
    ],
    LocationPostingDetails: [
        { name: "Country", schemaTypeName: null },
        { name: "City", schemaTypeName: null },
        { name: "Address", schemaTypeName: null },
        { name: "Latitude", schemaTypeName: "number" },
        { name: "Longitude", schemaTypeName: "number" },
    ],
    OData_EdmContainerElementKind: [
    ],
    OData_EdmExpressionKind: [
    ],
    OData_EdmSchemaElementKind: [
    ],
    OData_EdmTypeKind: [
    ],
    OData_IEdmDirectValueAnnotationsManager: [
    ],
    OData_IEdmEntityContainer: [
        { name: "Elements", schemaTypeName: null },
        { name: "SchemaElementKind", schemaTypeName: null },
        { name: "Namespace", schemaTypeName: null },
        { name: "Name", schemaTypeName: null },
    ],
    OData_IEdmEntityContainerElement: [
        { name: "ContainerElementKind", schemaTypeName: null },
        { name: "Container", schemaTypeName: "OData_IEdmEntityContainer" },
        { name: "Name", schemaTypeName: null },
    ],
    OData_IEdmExpression: [
        { name: "ExpressionKind", schemaTypeName: null },
    ],
    OData_IEdmModel: [
        { name: "SchemaElements", schemaTypeName: null },
        { name: "VocabularyAnnotations", schemaTypeName: null },
        { name: "ReferencedModels", schemaTypeName: null },
        { name: "DeclaredNamespaces", schemaTypeName: null },
        { name: "DirectValueAnnotationsManager", schemaTypeName: "OData_IEdmDirectValueAnnotationsManager" },
        { name: "EntityContainer", schemaTypeName: "OData_IEdmEntityContainer" },
    ],
    OData_IEdmSchemaElement: [
        { name: "SchemaElementKind", schemaTypeName: null },
        { name: "Namespace", schemaTypeName: null },
        { name: "Name", schemaTypeName: null },
    ],
    OData_IEdmTerm: [
        { name: "Type", schemaTypeName: "OData_IEdmTypeReference" },
        { name: "AppliesTo", schemaTypeName: null },
        { name: "DefaultValue", schemaTypeName: null },
        { name: "SchemaElementKind", schemaTypeName: null },
        { name: "Namespace", schemaTypeName: null },
        { name: "Name", schemaTypeName: null },
    ],
    OData_IEdmType: [
        { name: "TypeKind", schemaTypeName: null },
    ],
    OData_IEdmTypeReference: [
        { name: "IsNullable", schemaTypeName: null },
        { name: "Definition", schemaTypeName: "OData_IEdmType" },
    ],
    OData_IEdmVocabularyAnnotatable: [
    ],
    OData_IEdmVocabularyAnnotation: [
        { name: "Qualifier", schemaTypeName: null },
        { name: "Term", schemaTypeName: "OData_IEdmTerm" },
        { name: "Target", schemaTypeName: "OData_IEdmVocabularyAnnotatable" },
        { name: "Value", schemaTypeName: "OData_IEdmExpression" },
    ],
    OData_ODataEntitySetInfo: [
        { name: "TypeAnnotation", schemaTypeName: "OData_ODataTypeAnnotation" },
        { name: "Url", schemaTypeName: null },
        { name: "Name", schemaTypeName: null },
        { name: "Title", schemaTypeName: null },
    ],
    OData_ODataFunctionImportInfo: [
        { name: "TypeAnnotation", schemaTypeName: "OData_ODataTypeAnnotation" },
        { name: "Url", schemaTypeName: null },
        { name: "Name", schemaTypeName: null },
        { name: "Title", schemaTypeName: null },
    ],
    OData_ODataServiceDocument: [
        { name: "TypeAnnotation", schemaTypeName: "OData_ODataTypeAnnotation" },
        { name: "EntitySets", schemaTypeName: null },
        { name: "Singletons", schemaTypeName: null },
        { name: "FunctionImports", schemaTypeName: null },
    ],
    OData_ODataSingletonInfo: [
        { name: "TypeAnnotation", schemaTypeName: "OData_ODataTypeAnnotation" },
        { name: "Url", schemaTypeName: null },
        { name: "Name", schemaTypeName: null },
        { name: "Title", schemaTypeName: null },
    ],
    OData_ODataTypeAnnotation: [
        { name: "TypeName", schemaTypeName: null },
    ],
    PostingAuthorGet: [
        { name: "Id", schemaTypeName: null },
        { name: "Name", schemaTypeName: null },
        { name: "Email", schemaTypeName: null },
    ],
    PostingCreate: [
        { name: "Title", schemaTypeName: null },
        { name: "Description", schemaTypeName: null },
        { name: "ThumbnailUrl", schemaTypeName: null },
        { name: "Details", schemaTypeName: "PostingDetails" },
    ],
    PostingDetails: [
        { name: "Pricing", schemaTypeName: "PricingPostingDetails" },
        { name: "Location", schemaTypeName: "LocationPostingDetails" },
        { name: "Kind", schemaTypeName: null },
        { name: "RealEstate", schemaTypeName: "RealEstatePostingDetails" },
        { name: "Vehicle", schemaTypeName: "VehiclePostingDetails" },
    ],
    PostingGetDetailed: [
        { name: "General", schemaTypeName: "PostingGetGeneral" },
        { name: "PictureUrls", schemaTypeName: null },
        { name: "Author", schemaTypeName: "PostingAuthorGet" },
        { name: "Details", schemaTypeName: "PostingDetails" },
        { name: "Id", schemaTypeName: null },
    ],
    PostingGetGeneral: [
        { name: "Id", schemaTypeName: null },
        { name: "Title", schemaTypeName: null },
        { name: "Description", schemaTypeName: null },
        { name: "ThumbnailUrl", schemaTypeName: null },
        { name: "DatePosted", schemaTypeName: null },
        { name: "Slug", schemaTypeName: null },
    ],
    PostingKind: [
    ],
    PricingPostingDetails: [
        { name: "BargainKinds", schemaTypeName: null },
        { name: "Price", schemaTypeName: "number" },
        { name: "PriceMax", schemaTypeName: "number" },
    ],
    ProblemDetails: [
        { name: "type", schemaTypeName: null },
        { name: "title", schemaTypeName: null },
        { name: "status", schemaTypeName: null },
        { name: "detail", schemaTypeName: null },
        { name: "instance", schemaTypeName: null },
    ],
    RealEstateKind: [
    ],
    RealEstatePostingDetails: [
        { name: "Kind", schemaTypeName: null },
        { name: "SpacePurpose", schemaTypeName: null },
        { name: "Area", schemaTypeName: "number" },
        { name: "Rooms", schemaTypeName: null },
    ],
    RealEstateSpacePurpose: [
    ],
    VehiclePostingDetails: [
        { name: "Year", schemaTypeName: null },
        { name: "Manufacturer", schemaTypeName: null },
        { name: "Model", schemaTypeName: null },
    ],
};
